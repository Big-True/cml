#!cs
package cml

import imgui


var app=null
var font=null

function load(name,width,height,lay)
    var app=imgui.window_application(width,height,name)
    var font=imgui.add_font_default(20)
    var temp=true
    loop
        app.prepare()
        imgui.push_font(font)
        imgui.begin_window("window",temp,{imgui.flags.no_title_bar,imgui.flags.no_move,imgui.flags.no_scroll_bar,imgui.flags.no_collapse,imgui.flags.no_resize})
        imgui.set_window_pos(imgui.vec2(0,0))
        imgui.set_window_size(imgui.vec2(app.get_window_width(),app.get_window_height()))
        
        imgui.end_window()
        imgui.pop_font()
        app.render()
    until app.is_closed()
end

namespace chtype
    var none=0
    var str=1
    var num=2
    var sym=3
end

function get_type(ch)
    if ch.isalpha()
        return chtype.str
    end
    if ch.isdigit()
        return chtype.num
    end
    if ch.ispunct()
        return chtype.sym
    end
    return chtype.none
end

function word_split(str)
    var words={}
    var now=str.size()!=0?get_type(str[0]):chtype.none
    var temp=""
    foreach ch in str
        if ch!="\n"
            if get_type(ch)!=now or get_type(ch)==chtype.sym
                words.push_back(temp:now)
                temp=""+ch
                now=get_type(ch)
            else
                temp+=ch
            end
        end
    end
    if temp!=""
        words.push_back(temp:now)
    end
    return words
end

function combine(words)
    var new_words={}
    var new_words2={}
    var instr=false
    foreach a in words
        if instr==false
            if a.first()=="\""
                instr=true
                new_words.push_back("":chtype.str)
            else
                new_words.push_back(a)
            end
        else
            if a.first()=="\""
                instr=false
            else
                new_words.back().first()+=a.first()
            end
        end
    end
    foreach a in new_words
        if a.first()!="." and a.second()!=chtype.sym
            if new_words2.size()!=0
                if a.second()==chtype.num and new_words2.back().second()==chtype.num
                    new_words2.back()=to_integer(new_words2.back().first())+math.pow(10,-(a.first().size()))*to_integer(a.first())
                else
                    new_words2.push_back(a)
                end
            else
                new_words2.push_back(a)
            end
        end
    end
    return new_words2
end

function to_tree(words)

end

function load_data(str)
    return combine(word_split(str))
    return to_drawable(combine(word_split(str)))
end